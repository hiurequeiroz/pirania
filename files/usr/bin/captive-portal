#!/bin/sh
# requires ip6tables-mod-nat and ipset

for ipvX in ipv4 ipv6 ; do
	if [ "$ipvX" = "ipv4" ] ; then
		iptables=iptables
		family=inet
		icmp=icmp
	else
		iptables=ip6tables
		family=inet6
		icmp=icmpv6
	fi

	### Cleanup
	for interface in br-lan anygw bmx+; do
		$iptables -t mangle -D PREROUTING -i $interface -j pirania
	done

	$iptables -t nat -D PREROUTING -j pirania
	$iptables -t filter -D FORWARD -j pirania

	for table in mangle nat filter; do
		$iptables -t $table -F pirania
		$iptables -t $table -X pirania
	done

	### Buildup
	for table in mangle nat filter; do
		$iptables -t $table -N pirania
	done

	$iptables -t nat -A PREROUTING -j pirania
	$iptables -t filter -A FORWARD -j pirania

	for interface in $(uci get pirania.base_config.catch_interfaces); do
		$iptables -t mangle -A PREROUTING -i $interface -j pirania
	done

	ipset -exist create pirania-auth-macs hash:mac timeout 0
	ipset -exist create pirania-whitelist-$ipvX hash:net family $family

	for item in $(uci get pirania.base_config.whitelist_$ipvX); do
		ipset -exist add pirania-whitelist-$ipvX $item
	done

	ipset -exist add pirania-whitelist-ipv4 $(uci get network.lan.ipaddr)
	ipset -exist add pirania-whitelist-ipv6 $(uci get network.lan.ip6addr)

	for mac in $(voucher print_valid_macs) ; do
		ipset -exist add pirania-auth-macs $mac
	done

	$iptables -t mangle -A pirania -p $icmp -j RETURN
	$iptables -t mangle -A pirania -m set --match-set pirania-auth-macs src -j RETURN
	$iptables -t mangle -A pirania -m set --match-set pirania-whitelist-$ipvX  dst -j RETURN
	$iptables -t mangle -A pirania -j MARK --set-mark 0x66/0xff  # everything not icmp nor auth nor whitelisted will be marked for REJECT
	$iptables -t mangle -A pirania -p tcp --dport 80 -j MARK --set-mark 0x80/0xff  # unless is dport 80, re-set mark for REDIRECT

	$iptables -t nat    -A pirania -p tcp -m mark --mark 0x80/0xff -j REDIRECT --to-ports 2055
	$iptables -t filter -A pirania -m mark --mark 0x66/0xff -j REJECT
done
