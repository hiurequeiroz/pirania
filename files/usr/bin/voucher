#!/usr/bin/lua

local config = require('voucher.config')
local dba = require('voucher.db')
local logic = require('voucher.logic')
local ft = require('voucher.functools')

local arguments
local action
local context

captive_portal = {}

--[[
--Checks if a context(defined by a mac and a voucher code)
--is authorized to be used, and associates the mac to the
--voucher code if needed.
--]]
captive_portal.auth_voucher = function(context)
    local mac = context[1]
    local voucher = context[2]

    local db = dba.load(config.db)
    local expiretime, uploadlimit, downloadlimit = logic.auth_voucher(db, mac, voucher)

    if tonumber(expiretime) > 0 then
        -- ipset only supports timeout up to 4294967
        if tonumber(expiretime) > 4294967 then expiretime = 4294967 end
        os.execute("pirania-auth " .. mac .. " " .. expiretime)
    end

    dba.save(config.db, db)
    print ( expiretime, uploadlimit, downloadlimit )
end

--[[
--Checks if the mac of the given context is allowed to browse.
--]]
captive_portal.status = function(context)
    local mac = context[1]

    local db = dba.load(config.db)
    print ( logic.status(db, mac) )
end

--[[
--Adds a voucher to the db with the params defined by context.
--]]
captive_portal.add_voucher = function(context)
    local key = context[1]
    local voucher = context[2]
    local epoc = context[3]
    local upload = context[4] and context[4] or '0'
    local download = context[5] and context[5] or '0'
    local amountofmacsallowed = context[6] and context[6] or '0'

    local db = dba.load(config.db)
    local retval = { logic.add_voucher(db, key, voucher, epoc, upload, download, amountofmacsallowed)}
    dba.save(config.db, db)
    print ( unpack(retval) )
end

-- TODO refactor eliminate bash portion awk sed bash-isms
captive_portal.print_valid_macs = function()
    local db = dba.load(config.db)
    local macs = logic.valid_macs(db)
    for _, mac in ipairs(macs) do
        print ( mac )
    end
end

-- if is main
if debug.getinfo(2).name == nil then
    arguments = { ... }
    action = arguments[1]
    context = ft.filter(function(row, index) return index > 1 end, arguments)

    captive_portal[action](context)
end

return captive_portal
