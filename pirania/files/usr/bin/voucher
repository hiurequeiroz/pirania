#!/usr/bin/lua

local config = require('voucher.config')
local dba = require('voucher.db')
local logic = require('voucher.logic')
local ft = require('voucher.functools')
local json = require 'luci.json'

local arguments
local action
local context

captive_portal = {}

local function printJson (obj)
    print(json.encode(obj))
end

local function split(inputstr, sep)
    if sep == nil then
            sep = "+"
    end
    local t={}
    for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
            table.insert(t, str)
    end
    return t
end


--[[
--Checks if a context(defined by a mac and a voucher code)
--is authorized to be used, and associates the mac to the
--voucher code if needed.
--]]
captive_portal.auth_voucher = function(context)
    local mac = context[1]
    local voucher = context[2]

    local db = dba.load(config.db)
    local expiretime, uploadlimit, downloadlimit = logic.auth_voucher(db, mac, voucher)

    if tonumber(expiretime) > 0 then
        -- ipset only supports timeout up to 4294967
        if tonumber(expiretime) > 4294967 then expiretime = 4294967 end
        os.execute("ipset -exist add pirania-auth-macs " .. mac .. " timeout ".. expiretime)
    end

    dba.save(config.db, db)
    print ( expiretime, uploadlimit, downloadlimit )
end

--[[
--Checks if the mac of the given context is allowed to browse.
--]]
captive_portal.status = function(context)
    local mac = context[1]

    local db = dba.load(config.db)
    print ( logic.status(db, mac) )
end

-- List all
captive_portal.list_vouchers = function()
    local result = {}
    local vName = 1
    local vSecret = 2
    local vExpire = 3
    local vMacsAllowed = 6
    local usedMacs = 7
    local db = dba.load(config.db)
    local validVouchers = ft.filter(function(row, index) return tonumber(row[vExpire]) > os.time() end, db.data)
    for _, v in pairs(validVouchers) do
        result[_] = {}
        result[_].name = v[vName]
        result[_].expires = v[vExpire]
        result[_].voucher = v[vSecret]
        result[_].macsAllowed = v[vMacsAllowed]
        result[_].macs = split(v[usedMacs])
    end
    printJson(result)
end

-- Remove voucher
captive_portal.remove_voucher = function(context)
    local result = {}
    local voucherName = context[1]
    local db = dba.load(config.db)
    local toRemove = {}
    for _, voucher in pairs (db.data) do
        if (voucher[1] == voucherName) then
            toRemove = voucher
        end
    end
    if (#toRemove > 0) then
        result.success = true
        toRemove[3] = 0
        local validVouchers = ft.filter(function(row, index) return row[1] ~= voucherName end, db.data)
        local newDb = db
        newDb.data = validVouchers
        table.insert(newDb.data, toRemove)
        dba.save(config.db, newDb)
        else result.success = false
    end
    printJson(result)
end

--[[
--Adds a voucher to the db with the params defined by context.
--]]
captive_portal.add_voucher = function(context)
    local key = context[1]
    local voucher = context[2]
    local epoc = context[3]
    local upload = context[4] and context[4] or '0'
    local download = context[5] and context[5] or '0'
    local amountofmacsallowed = context[6] and context[6] or '0'

    local db = dba.load(config.db)
    local retval = { logic.add_voucher(db, key, voucher, epoc, upload, download, amountofmacsallowed)}
    dba.save(config.db, db)
    print ( unpack(retval) )
end

-- TODO refactor eliminate bash portion awk sed bash-isms
captive_portal.print_valid_macs = function()
    local db = dba.load(config.db)
    local macs = logic.valid_macs(db)
    for _, mac in ipairs(macs) do
        print ( mac )
    end
end

-- if is main
if debug.getinfo(2).name == nil then
    arguments = { ... }
    action = arguments[1]
    context = ft.filter(function(row, index) return index > 1 end, arguments)

    captive_portal[action](context)
end

return captive_portal
